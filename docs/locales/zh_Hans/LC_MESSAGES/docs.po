# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2025 ZiYueCommentary
# This file is distributed under the same license as the ZiYue4D package.
# 子悦解说 <ziyuecommentary@gmail.com>, 2025.
msgid ""
msgstr ""
"Project-Id-Version: ZiYue4D 0.1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-03 11:33+0800\n"
"PO-Revision-Date: 2025-10-03 03:42+0000\n"
"Last-Translator: 子悦解说 <ziyuecommentary@gmail.com>\n"
"Language-Team: Chinese (Simplified Han script) <https://"
"weblate.ziyuesinicization.site/projects/ziyue4d/documentation/zh_Hans/>\n"
"Language: zh_Hans\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Weblate 5.13.3\n"

#: ../../basic-data-types.rst:2
msgid "Basic Data Types"
msgstr "基本数据类型"

#: ../../basic-data-types.rst:4
msgid "There are 4 basic data types:"
msgstr "ZiYue4D 中共有 4 种数据类型："

#: ../../basic-data-types.rst:9 ../../basic-data-types.rst:90
#: ../../basic-data-types.rst:92
msgid "Integer"
msgstr "整数"

#: ../../basic-data-types.rst:11
msgid ""
"**Integer** are numeric values with no fractional part in them, ``int32`` in "
"essence. For example: ``5``, ``-10``, ``0`` are integer values. All integer "
"values in the program must be in the range ``-2147483648`` to "
"``+2147483647``."
msgstr ""
"**整数** 是没有小数部分的数值，本质上是 "
"``int32``。例如：``5``、``-10``、``0`` 是整数值。程序中的所有整数值必须在 "
"``-2147483648`` 到 ``+2147483647`` 的范围内。"

#: ../../basic-data-types.rst:16
msgid "Digit separator"
msgstr "数字分隔符"

#: ../../basic-data-types.rst:18
msgid ""
"**Digit separator** ``_`` can be used to separate a long literal number. For "
"example, ``3_14_15_926`` is equavlant to ``31415926``."
msgstr "**数字分隔符** ``_`` 可用于分割一段较长的字面量数字。例如，``3_14_15_926`` "
"等价于 ``31415926``。"

#: ../../basic-data-types.rst:23 ../../basic-data-types.rst:90
#: ../../basic-data-types.rst:94
msgid "Float"
msgstr "浮点"

#: ../../basic-data-types.rst:25
msgid ""
"**Float** are numeric values that include a fractional part. For example: "
"``.5``, ``-10.1``, ``0.0`` are all floating point values. You can also "
"use :ref:`digit_separator` to separate literal."
msgstr ""
"**浮点数** 是包含小数部分的数值。例如：``.5``、``-10.1``、``0.0`` "
"都是浮点值。你也可以使用 :ref:`digit_separator` 来分割字面量。"

#: ../../basic-data-types.rst:30 ../../basic-data-types.rst:90
#: ../../basic-data-types.rst:96
msgid "String"
msgstr "字符串"

#: ../../basic-data-types.rst:32
msgid "**String** are used to contain text. For example: ``\"Hello World!\"``."
msgstr "**字符串** 用于包含文本。例如：``\"你好，世界！\"``。"

#: ../../basic-data-types.rst:35
msgid "Escape characters"
msgstr "转义字符"

#: ../../basic-data-types.rst:37
msgid ""
"You need to use **escape characters** to insert ``\"`` or line feed in a "
"literal string. This is a modern alternative to ``Chr`` function."
msgstr "你需要使用 **转义字符** 以向字面量字符串中插入 ``\"`` 或换行符。"
"这是一种现代的 ``Chr`` 函数替代方案。"

#: ../../basic-data-types.rst:40
msgid "Character"
msgstr "字符"

#: ../../basic-data-types.rst:40
msgid "Result"
msgstr "结果"

#: ../../basic-data-types.rst:42
msgid "``\\'``"
msgstr "``\\'``"

#: ../../basic-data-types.rst:42
msgid "single quote"
msgstr "单引号"

#: ../../basic-data-types.rst:44
msgid "``\\\"``"
msgstr "``\\\"``"

#: ../../basic-data-types.rst:44
msgid "double quote"
msgstr "双引号"

#: ../../basic-data-types.rst:46
msgid "``\\\\``"
msgstr "``\\\\``"

#: ../../basic-data-types.rst:46
msgid "backslash"
msgstr "反斜杠"

#: ../../basic-data-types.rst:48
msgid "``\\n``"
msgstr ""
"``\\n"
"``"

#: ../../basic-data-types.rst:48
msgid "new line"
msgstr "换行符"

#: ../../basic-data-types.rst:50
msgid "``\\r``"
msgstr "``\\r``"

#: ../../basic-data-types.rst:50
msgid "carriage return"
msgstr "回车"

#: ../../basic-data-types.rst:52
msgid "``\\t``"
msgstr "``\\t``"

#: ../../basic-data-types.rst:52
msgid "tab"
msgstr "制表符"

#: ../../basic-data-types.rst:54
msgid "``\\b``"
msgstr "``\\b``"

#: ../../basic-data-types.rst:54
msgid "backspace"
msgstr "退格"

#: ../../basic-data-types.rst:56
msgid "``\\f``"
msgstr "``\\f``"

#: ../../basic-data-types.rst:56
msgid "form feed"
msgstr "换页符"

#: ../../basic-data-types.rst:59
msgid ""
"The example below shows the usage of the escape character. Both of them "
"print ``Hello\"World!``. It is recommended to replace the legacy BlitzBasic "
"method with escape characters, as it processes at compile time and produces "
"fewer string objects at runtime."
msgstr ""
"以下的示例展示了转义字符的使用。以下两行代码都会打印 ``Hello\"World!``。"
"推荐使用转义字符来替代传统的 BlitzBasic "
"写法，因为转义字符是在编译期处理，并能减少运行时的字符串对象数量。"

#: ../../basic-data-types.rst:71 ../../basic-data-types.rst:90
#: ../../basic-data-types.rst:98
msgid "Pointer"
msgstr "指针"

#: ../../basic-data-types.rst:73
msgid ""
"**Pointer** are objects that store a memory address. This type is for "
"solving that pointers are stored in an integer in BlitzBasic."
msgstr ""

#: ../../basic-data-types.rst:75 ../../basic-data-types.rst:102
msgid ""
"When assigning a pointer to an integer variable, ZiYue4D will automatically "
"raise the variable to pointer type."
msgstr ""

#: ../../basic-data-types.rst:78
msgid "Implicit conversion"
msgstr "隐式转换"

#: ../../basic-data-types.rst:80
msgid ""
"**Implicit conversion** plays an important role in ZiYue4D. Most of the "
"conversion in ZiYue4D is implicit, and observes the same rules as in "
"BlitzBasic."
msgstr ""

#: ../../basic-data-types.rst:82
msgid ""
"When an binary operation involves two different data types, ZiYue4D will "
"automatically convert one of the operands to the other type. The conversion "
"rules are as follows:"
msgstr ""

#: ../../basic-data-types.rst:84
msgid ""
"Pointers cannot be converted to any other type, and no other type can be "
"converted to pointers. [#f1]_"
msgstr "指针不能转换为其他类型，也没有其他类型可以转换为指针。[#f1]_"

#: ../../basic-data-types.rst:85
msgid "If one operand is a string, the other is converted to a string."
msgstr ""

#: ../../basic-data-types.rst:86
msgid ""
"If one operand is floating point, the other is converted to floating point."
msgstr ""

#: ../../basic-data-types.rst:87
msgid "Otherwise, both operands are integers."
msgstr ""

#: ../../basic-data-types.rst:90
msgid "From \\\\ To"
msgstr "自 \\\\ 至"

#: ../../basic-data-types.rst:92 ../../basic-data-types.rst:94
#: ../../basic-data-types.rst:96 ../../basic-data-types.rst:98
msgid "✅"
msgstr "✅"

#: ../../basic-data-types.rst:92 ../../basic-data-types.rst:94
#: ../../basic-data-types.rst:96 ../../basic-data-types.rst:98
msgid "❌"
msgstr "❌"

#: ../../basic-data-types.rst:94
msgid "❗ [#f2]_"
msgstr "❗ [#f2]_"

#: ../../basic-data-types.rst:98
msgid "❗ [#f3]_"
msgstr "❗ [#f3]_"

#: ../../basic-data-types.rst:101
msgid "Footnotes"
msgstr "脚注"

#: ../../basic-data-types.rst:103
msgid ""
"Float to Integer will round to the nearest integer. This may lead to loss of "
"accuracy."
msgstr "浮点转整数会四舍五入到最近的整数，可能导致精度丢失。"

#: ../../basic-data-types.rst:104
msgid ""
"Storing a pointer in an integer is deprecated BlitzBasic practice. ZiYue4D "
"will raise the variable to pointer type automatically."
msgstr ""

#: ../../comments.rst:2
msgid "Comments"
msgstr "注释"

#: ../../comments.rst:4
msgid ""
"You add comments to your programs using the ``;`` character. Everything "
"following ``;`` until the end of the line will be ignored."
msgstr ""
"您可以在您的程序中使用 ``;`` 来添加注释。从 ``;`` 到行尾的一切内容将被忽略。"

#: ../../comments.rst:6
msgid ""
"``/* */`` is also supported for block comments. Everything between ``/*`` "
"and ``*/`` will be ignored, even if it spans multiple lines. Block comments "
"do not nest."
msgstr ""
"``/* */`` 可用于块注释。``/*`` 和 ``*/`` 之间的所有内容都将被忽略，并且允许跨"
"行。块注释不可嵌套。"

#: ../../functions.rst:2
msgid "Functions"
msgstr "函数"

#: ../../functions.rst:6
msgid "Functions cannot be declared inside a function."
msgstr ""

#: ../../functions.rst:8
msgid "A function is defined using the ``Function`` keyword:"
msgstr ""

#: ../../functions.rst:16
msgid ""
"``name%(arg1$, arg2# = 3.14)`` is the **function signature**, which it "
"contains:"
msgstr "``name%(arg1$, arg2# = 3.14)`` 是 **函数签名**，其中包括："

#: ../../functions.rst:18
msgid "``name`` is the function name, can be any valid :ref:`identifiers`."
msgstr "``name`` 是函数名，可以是任何有效 :ref:`identifiers` 。"

#: ../../functions.rst:20
msgid ""
"``%`` is the type of value returned by the function. If it is omitted, the "
"function returns an integer value by default."
msgstr ""

#: ../../functions.rst:22
msgid ""
"``arg1$, arg2# = 3.14`` is a comma-separated list of arguments. ``arg1$`` is "
"a **mandatory argument** with no default value. ``arg2#`` is an **optional "
"argument** since it has a default value. Arguments are always local."
msgstr ""

#: ../../functions.rst:24
msgid ""
"The statements between signature and ``End Function`` are the **function "
"definition**. All ZiYue4D functions should have signature and definition."
msgstr ""

#: ../../functions.rst:26
msgid ""
"A function may use the ``Return`` statement to return a result. ``Return`` "
"may optionally be followed by an expression."
msgstr ""

#: ../../functions.rst:28
msgid ""
"If there is no ``Return`` statement, or a ``Return`` without any expression "
"is used, the function returns a default value of ``0`` for numeric "
"functions, an empty string ``\"\"`` for string functions, or a Null object "
"for custom-type functions."
msgstr ""

#: ../../functions.rst:33
msgid "Exteral function"
msgstr "外部函数"

#: ../../functions.rst:35
msgid ""
"**External functions** are implemented in other programming languages, which "
"are to be called by ZiYue4D program."
msgstr "**外部函数** 是使用其他编程语言实现的，由 ZiYue4D 程序调用的函数。"

#: ../../functions.rst:37
msgid ""
"Using ``Extern`` keyword before its signature to declare an external "
"function. External functions should not have a function definition. Unlike "
"regular functions, if return value type is omitted, the type will be "
"``void``, which means no return value."
msgstr "在函数签名前使用 ``Extern`` "
"关键字来声明外部函数。外部函数没有函数实现。与一般的函数不同，如果未指明返回"
"值类型，则默认无返回值。"

#: ../../functions.rst:39
msgid "This concept is designed for replacing ``.decls`` in Blitz3D."
msgstr ""

#: ../../functions.rst:41
msgid "The example below shows a declaration of an external function."
msgstr "以下的示例展示了一个外部函数的声明。"

#: ../../functions.rst:50
msgid "Function overloading"
msgstr "函数重载"

#: ../../functions.rst:54
msgid ":ref:`extern-function` does not support overloading."
msgstr ":ref:`extern-function` 不支持函数重载。"

#: ../../functions.rst:56
msgid ""
"When multiple functions need to share the same name, ZiYue4D will check its "
"arguments to determine whether it is overridable. Basically, the regulation "
"of overloading is:"
msgstr ""
"当多个函数使用同一名称时，ZiYue4D 会检查它们的参数来判断是否可以重载。基本"
"上，函数重载的规则是："

#: ../../functions.rst:58
msgid "The functions share the same name."
msgstr "函数名必须一致。"

#: ../../functions.rst:59
msgid "Their number of mandatory arguments and optional arguments is unique."
msgstr "每个函数的必需参数和缺省参数数量与其他函数不同。"

#: ../../functions.rst:60
msgid "The return value type and argument types are irrelevant to overloading."
msgstr "返回值和参数类型不影响函数重载。"

#: ../../functions.rst:62
msgid ""
"The example below shows the overloading. The first and the second are valid "
"since they have different counts of mandatory and optional arguments. The "
"third one is invalid, in contrast, even though its argument types are unique."
msgstr ""
"以下的示例展示了函数重载。第一、二个函数是有效重载，因为它们的必需参数和缺省"
"参数数量不同。而第三个函数则是无效重载，即使每个参数的类型都与其他函数不同。"

#: ../../identifiers.rst:4
msgid "Identifiers"
msgstr "标识符"

#: ../../identifiers.rst:6
msgid ""
"Identifiers are used for constant names, variable names, array names, "
"function names, and custom type names."
msgstr ""

#: ../../identifiers.rst:8
msgid ""
"Identifiers supports Unicode characters, but not start with an number. For "
"example, ``Hello``, ``player1``, ``time_to_live``, ``__var``, ``变量`` are "
"all valid identifiers."
msgstr ""

#: ../../identifiers.rst:10
msgid ""
"Identifiers are not case-sensitive. For example, ``Test``, ``TEST`` and "
"``test`` are all the same identifiers. Note that this works for alphabets "
"only, Unicode identifiers may be case-sensitive."
msgstr ""

#: ../../identifiers.rst:12
msgid ""
"It is allowed for identifiers to be reused for functions and variables. For "
"example, you can have a variable called ``test``, a function called "
"``test``. When the identifier is not inside a function call, it will be seen "
"as a function by default."
msgstr ""

#: ../../identifiers.rst:14
msgid ""
"The example below shows how ZiYue4D distinguishes variables and functions. "
"In line 1, ``Foo`` is a function, and ``bar`` is a variable. In line 2, "
"``Foo`` is a function, and ``bar`` is a function. However, the third line is "
"suggested, since it clearly shows which one is variable."
msgstr ""

#: ../../index.rst:2
msgid "Welcome to ZiYue4D documentation!"
msgstr "欢迎来到 ZiYue4D 文档！"

#: ../../index.rst:4
msgid ""
"**ZiYue4D** is a programming language that is powered by LLVM and is based "
"on BlitzBasic. It is intended to be a modern cross-platform alternative to "
"BlitzBasic."
msgstr ""
"**ZiYue4D** 是一个基于 BlitzBasic 设计的，由 LLVM "
"驱动的编程语言。一种现代的、跨平台的 BlitzBasic 替代品。"

#: ../../index.rst:8
msgid "This project is under active development."
msgstr "该项目正在积极开发中。"

#: ../../index.rst:11
msgid "Contents"
msgstr "内容"

#: ../../unsafe-operations.rst:2
msgid "Unsafe operations"
msgstr "不安全操作"

#: ../../unsafe-operations.rst:4
msgid ""
"**Unsafe operations** such as retrieving pointers or converting a pointer to "
"integer, are not recommended for use. In most cases, unsafe operations are "
"not required. Using them improperly will cause undefined behavior, and even "
"crash the program."
msgstr ""

#: ../../unsafe-operations.rst:7
msgid "Function pointer"
msgstr "函数指针"

#: ../../unsafe-operations.rst:11
msgid ""
"Retrieving pointer of function which used :ref:`function-overloading` is "
"undefined behavior."
msgstr "获取使用 :ref:`function-overloading` 的函数指针是未定义行为。"

#: ../../unsafe-operations.rst:13
msgid ""
"Using ``&`` unary operator on a function identifier to retrieve its pointer."
msgstr "对函数名使用 ``&`` 一元运算符来获取函数指针。"

#: ../../unsafe-operations.rst:15
msgid "The example below shows retrieve a function pointer."
msgstr "以下的示例展示了获取函数的函数指针。"

#: ../../variables.rst:2
msgid "Variables"
msgstr "变量"

#: ../../variables.rst:4
msgid ""
"**Variables** may be of any basic data type, or a custom type. A variable's "
"type is determined by a special character that follows its identifier. These "
"special characters are called **type tags**."
msgstr ""

#: ../../variables.rst:7
msgid "Tag"
msgstr ""

#: ../../variables.rst:7
msgid "Type"
msgstr ""

#: ../../variables.rst:9
msgid "``%``"
msgstr ""

#: ../../variables.rst:9
msgid ":ref:`integer`"
msgstr ""

#: ../../variables.rst:11
msgid "``#``"
msgstr ""

#: ../../variables.rst:11
msgid ":ref:`float`"
msgstr ""

#: ../../variables.rst:13
msgid "``$``"
msgstr ""

#: ../../variables.rst:13
msgid ":ref:`string`"
msgstr ""

#: ../../variables.rst:15
msgid "``@``"
msgstr ""

#: ../../variables.rst:15
msgid ":ref:`pointer`"
msgstr ""

#: ../../variables.rst:18
msgid ""
"The type tag only needs to be added the first time you use a variable, after "
"that you can leave the type tag off if you wish."
msgstr ""

#: ../../variables.rst:20
msgid ""
"If you don't supply a type tag the first time a variable is used, the "
"variable defaults to an integer."
msgstr ""

#: ../../variables.rst:22
msgid ""
"It is illegal to use the same variable name with a different type. For "
"example, if you already have an integer variable called ``name%``, it is "
"illegal to also have a string variable called ``name$``."
msgstr ""

#: ../../variables.rst:25
msgid "Assignment"
msgstr ""

#: ../../variables.rst:27
msgid ""
"You can use ``=`` to assign a value to a variable. For example: ``score% = "
"0`` will assign the value ``0`` to the integer variable ``score``. This "
"expression returns the assigned value, which means you can do assignment and "
"comparison in a single line."
msgstr ""

#: ../../variables.rst:34
msgid "Scope"
msgstr ""

#: ../../variables.rst:36
msgid ""
"Variables may also be either ``Global``, or ``Local``. This refers to where "
"in a program a variable may be used. ``Global`` variables can be used from "
"anywhere in the program. ``Local`` variables can only be used within the "
"function they are created in."
msgstr ""

#: ../../variables.rst:38
msgid ""
"The ``Global`` keyword is used to define one or more global variables. For "
"example:"
msgstr ""

#: ../../variables.rst:44
msgid "Defines 3 global variables."
msgstr ""

#: ../../variables.rst:46
msgid "Similarly, ``Local`` is used to define local variables:"
msgstr ""

#: ../../variables.rst:52
msgid ""
"The operations above is called **explicit definition**. It indicates "
"variable declaration, and throws a compile error when defining it multiple "
"times. If you use a variable without defining it as either local or global, "
"it defaults to being local. This operation is called **implicit "
"definition**. This is not suggested since it creates another variable when "
"you have a typo, leading to unexpected results."
msgstr ""

#: ../../variables.rst:54
msgid ""
"It is strongly recommended to use ``Local`` or ``Global`` to declare "
"variables, since it is a safer practice. You can also turn safe check in "
"compiler to force the program to use explicit definition, and disable "
"implicit definition."
msgstr ""
