# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2025 ZiYueCommentary
# This file is distributed under the same license as the ZiYue4D package.
# 子悦解说 <ziyuecommentary@gmail.com>, 2025.
msgid ""
msgstr ""
"Project-Id-Version: ZiYue4D 0.1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-27 00:58+0800\n"
"PO-Revision-Date: 2025-09-26 17:09+0000\n"
"Last-Translator: 子悦解说 <ziyuecommentary@gmail.com>\n"
"Language-Team: Chinese (Simplified Han script) <https://"
"weblate.ziyuesinicization.site/projects/ziyue4d/documentation/zh_Hans/>\n"
"Language: zh_Hans\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Weblate 5.12.2\n"

#: ../../basic-data-types.rst:2
msgid "Basic Data Types"
msgstr "基本数据类型"

#: ../../basic-data-types.rst:4
msgid "There are 4 basic data types:"
msgstr "ZiYue4D 中共有 4 种数据类型："

#: ../../basic-data-types.rst:6
msgid ""
"**Integer** are numeric values with no fractional part in them. For example: "
"5,-10,0 are integer values. All integer values in your program must be in "
"the range -2147483648 to +2147483647."
msgstr ""
"**整数** 是没有小数部分的数值。例如：5、-10、0是整数值。程序中的所有整数值必"
"须在 -2147483648 到 +2147483647 的范围内。"

#: ../../basic-data-types.rst:8
msgid ""
"**Float** are numeric values that include a fractional part. For example: "
".5, -10.1, 0.0 are all floating point values."
msgstr "**浮点数** 是包含小数部分的数值。例如：.5、-10.1、0.0 都是浮点值。"

#: ../../basic-data-types.rst:10
msgid "**String** are used to contain text. For example: \"Hello World!\"."
msgstr "**字符串** 用于包含文本。例如：\"你好，世界！\"。"

#: ../../basic-data-types.rst:12
msgid ""
"**Pointer** are objects that store a memory address. This type is for "
"solving that pointers are stored in an integer in BlitzBasic."
msgstr ""

#: ../../basic-data-types.rst:15
msgid "Implicit conversion"
msgstr "隐式转换"

#: ../../basic-data-types.rst:17
msgid ""
"**Implicit conversion** plays an important role in ZiYue4D. Most of the "
"conversion in ZiYue4D is implicit, and observes the same rules as in "
"BlitzBasic."
msgstr ""

#: ../../basic-data-types.rst:19
msgid ""
"When an binary operation involves two different data types, ZiYue4D will "
"automatically convert one of the operands to the other type. The conversion "
"rules are as follows:"
msgstr ""

#: ../../basic-data-types.rst:21
msgid ""
"Pointers cannot be converted to any other type, and no other type can be "
"converted to pointers. [#f1]_"
msgstr "指针不能转换为其他类型，也没有其他类型可以转换为指针。[#f1]_"

#: ../../basic-data-types.rst:22
msgid "If one operand is a string, the other is converted to a string."
msgstr ""

#: ../../basic-data-types.rst:23
msgid ""
"If one operand is floating point, the other is converted to floating point."
msgstr ""

#: ../../basic-data-types.rst:24
msgid "Otherwise, both operands are integers."
msgstr ""

#: ../../basic-data-types.rst:27
msgid "From \\\\ To"
msgstr "自 \\\\ 至"

#: ../../basic-data-types.rst:27 ../../basic-data-types.rst:29
msgid "Integer"
msgstr "整数"

#: ../../basic-data-types.rst:27 ../../basic-data-types.rst:31
msgid "Float"
msgstr "浮点"

#: ../../basic-data-types.rst:27 ../../basic-data-types.rst:33
msgid "String"
msgstr "字符串"

#: ../../basic-data-types.rst:27 ../../basic-data-types.rst:35
msgid "Pointer"
msgstr "指针"

#: ../../basic-data-types.rst:29 ../../basic-data-types.rst:31
#: ../../basic-data-types.rst:33 ../../basic-data-types.rst:35
msgid "✅"
msgstr "✅"

#: ../../basic-data-types.rst:29 ../../basic-data-types.rst:31
#: ../../basic-data-types.rst:33 ../../basic-data-types.rst:35
msgid "❌"
msgstr "❌"

#: ../../basic-data-types.rst:31
msgid "❗ [#f2]_"
msgstr "❗ [#f2]_"

#: ../../basic-data-types.rst:35
msgid "❗ [#f3]_"
msgstr "❗ [#f3]_"

#: ../../basic-data-types.rst:38
msgid "Footnotes"
msgstr "脚注"

#: ../../basic-data-types.rst:39
msgid ""
"When assigning a pointer to an integer variable, ZiYue4D will automatically "
"raise the variable to pointer type."
msgstr ""

#: ../../basic-data-types.rst:40
#, fuzzy
#| msgid ""
#| "Float to Integer conversion truncates the fractional part. This may leads "
#| "to loss of accuracy."
msgid ""
"Float to Integer will round to the nearest integer. This may lead to loss of "
"accuracy."
msgstr "浮点转整数会丢弃小数部分，可能导致精度丢失。"

#: ../../basic-data-types.rst:41
msgid ""
"Storing a pointer in an integer is deprecated BlitzBasic practice. ZiYue4D "
"will raise the variable to pointer type automatically."
msgstr ""

#: ../../comments.rst:2
msgid "Comments"
msgstr "注释"

#: ../../comments.rst:4
msgid ""
"You add comments to your programs using the ``;`` character. Everything "
"following ``;`` until the end of the line will be ignored."
msgstr ""
"您可以在您的程序中使用 ``;`` 来添加注释。从 ``;`` 到行尾的一切内容将被忽略。"

#: ../../comments.rst:6
msgid ""
"``/* */`` is also supported for block comments. Everything between ``/*`` "
"and ``*/`` will be ignored, even if it spans multiple lines. Block comments "
"do not nest."
msgstr ""
"``/* */`` 可用于块注释。``/*`` 和 ``*/`` 之间的所有内容都将被忽略，并且允许跨"
"行。块注释不可嵌套。"

#: ../../functions.rst:2
msgid "Functions"
msgstr "函数"

#: ../../functions.rst:4
msgid "A function is defined using the Function keyword:"
msgstr ""

#: ../../functions.rst:12
msgid ""
"``name%(arg1$, arg2# = 3.14)`` is the **function signature**, which it "
"contains:"
msgstr "``name%(arg1$, arg2# = 3.14)`` 是 **函数签名**，其中包括："

#: ../../functions.rst:14
msgid "``name`` is the function name, can be any valid identifier."
msgstr "``name`` 是函数名，可以是任何有效标识符。"

#: ../../functions.rst:16
msgid ""
"``%`` is the type of value returned by the function. If it is omitted,the "
"function returns an integer value by default."
msgstr ""

#: ../../functions.rst:18
msgid ""
"``arg1$, arg2# = 3.14`` is a comma-separated list of arguments. ``arg1$`` is "
"a **mandatory argument** with no default value. ``arg2#`` is an **optional "
"argument** since it has a default value. Arguments are always local."
msgstr ""

#: ../../functions.rst:20
msgid ""
"The statements between signature and ``End Function`` are the **function "
"definition**. All ZiYue4D functions should have signature and definition."
msgstr ""

#: ../../functions.rst:22
msgid ""
"A function may use the ``Return`` statement to return a result. ``Return`` "
"may optionally be followed by an expression."
msgstr ""

#: ../../functions.rst:24
msgid ""
"If there is no ``Return`` statement, or a ``Return`` without any expression "
"is used, the function returns a default value of ``0`` for numeric "
"functions, an empty string ``\"\"`` for string functions, or a Null object "
"for custom-type functions."
msgstr ""

#: ../../functions.rst:29
msgid "Exteral function"
msgstr "外部函数"

#: ../../functions.rst:31
msgid ""
"**External functions** are implemented in other programming languages, which "
"are to be called by ZiYue4D program."
msgstr "**外部函数** 是使用其他编程语言实现的，由 ZiYue4D 程序调用的函数。"

#: ../../functions.rst:33
msgid ""
"Using ``Extern`` keyword before its signature to declare an external "
"function. External functions should not have a function definition. This "
"concept is designed for replacing ``.decls`` in Blitz3D."
msgstr ""
"在函数签名前使用 ``Extern`` 关键字来声明外部函数。外部函数没有函数实现。"
"这一设计被用来替代 Blitz3D 中的 ``.decls``。"

#: ../../functions.rst:35
msgid "The example below shows a declaration of an external function."
msgstr "以下的示例展示了一个外部函数的声明。"

#: ../../functions.rst:42
msgid "Function overloading"
msgstr "函数重载"

#: ../../functions.rst:46
msgid ":ref:`extern-function` does not support overloading."
msgstr ":ref:`extern-function` 不支持函数重载。"

#: ../../functions.rst:48
msgid ""
"When multiple functions need to share the same name, ZiYue4D will check its "
"arguments to determine whether it is overridable. Basically, the regulation "
"of overloading is:"
msgstr "当多个函数使用同一名称时，ZiYue4D "
"会检查它们的参数来判断是否可以重载。基本上，函数重载的规则是："

#: ../../functions.rst:50
msgid "The functions share the same name."
msgstr "函数名必须一致。"

#: ../../functions.rst:51
msgid "Their number of mandatory arguments and optional arguments is unique."
msgstr "每个函数的必需参数和缺省参数数量与其他函数不一致。"

#: ../../functions.rst:52
msgid "The return value type and argument types are irrelevant to overloading."
msgstr "返回值和参数类型不影响函数重载。"

#: ../../functions.rst:54
msgid ""
"The example below shows the overloading. The first and the second are valid "
"since they have different counts of mandatory and optional arguments. The "
"third one is invalid, in contrast, even though its argument types are unique."
msgstr ""
"以下的示例展示了函数重载。第一、二个函数是有效重载，因为它们的必需参数和缺省"
"参数数量不同。而第三个函数则是无效重载，即使每个参数的类型都与其他函数不同。"

#: ../../index.rst:2
msgid "Welcome to ZiYue4D documentation!"
msgstr "欢迎来到 ZiYue4D 文档！"

#: ../../index.rst:4
msgid ""
"**ZiYue4D** is a programming language that is powered by LLVM and is based "
"on BlitzBasic."
msgstr "**ZiYue4D** 是一个基于 BlitzBasic 设计的，由 LLVM 驱动的编程语言。"

#: ../../index.rst:8
msgid "This project is under active development."
msgstr "该项目正在积极开发中。"

#: ../../index.rst:11
msgid "Contents"
msgstr "内容"
