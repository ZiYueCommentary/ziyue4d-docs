# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2025 ZiYueCommentary
# This file is distributed under the same license as the ZiYue4D package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: ZiYue4D 0.1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-27 12:23+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../basic-data-types.rst:2
msgid "Basic Data Types"
msgstr ""

#: ../../basic-data-types.rst:4
msgid "There are 4 basic data types:"
msgstr ""

#: ../../basic-data-types.rst:6
msgid "**Integer** are numeric values with no fractional part in them. For example: 5,-10,0 are integer values. All integer values in your program must be in the range -2147483648 to +2147483647."
msgstr ""

#: ../../basic-data-types.rst:8
msgid "**Float** are numeric values that include a fractional part. For example: .5, -10.1, 0.0 are all floating point values."
msgstr ""

#: ../../basic-data-types.rst:10
msgid "**String** are used to contain text. For example: \"Hello World!\"."
msgstr ""

#: ../../basic-data-types.rst:12
msgid "**Pointer** are objects that store a memory address. This type is for solving that pointers are stored in an integer in BlitzBasic."
msgstr ""

#: ../../basic-data-types.rst:15
msgid "Implicit conversion"
msgstr ""

#: ../../basic-data-types.rst:17
msgid "**Implicit conversion** plays an important role in ZiYue4D. Most of the conversion in ZiYue4D is implicit, and observes the same rules as in BlitzBasic."
msgstr ""

#: ../../basic-data-types.rst:19
msgid "When an binary operation involves two different data types, ZiYue4D will automatically convert one of the operands to the other type. The conversion rules are as follows:"
msgstr ""

#: ../../basic-data-types.rst:21
msgid "Pointers cannot be converted to any other type, and no other type can be converted to pointers. [#f1]_"
msgstr ""

#: ../../basic-data-types.rst:22
msgid "If one operand is a string, the other is converted to a string."
msgstr ""

#: ../../basic-data-types.rst:23
msgid "If one operand is floating point, the other is converted to floating point."
msgstr ""

#: ../../basic-data-types.rst:24
msgid "Otherwise, both operands are integers."
msgstr ""

#: ../../basic-data-types.rst:27
msgid "From \\\\ To"
msgstr ""

#: ../../basic-data-types.rst:27
#: ../../basic-data-types.rst:29
msgid "Integer"
msgstr ""

#: ../../basic-data-types.rst:27
#: ../../basic-data-types.rst:31
msgid "Float"
msgstr ""

#: ../../basic-data-types.rst:27
#: ../../basic-data-types.rst:33
msgid "String"
msgstr ""

#: ../../basic-data-types.rst:27
#: ../../basic-data-types.rst:35
msgid "Pointer"
msgstr ""

#: ../../basic-data-types.rst:29
#: ../../basic-data-types.rst:31
#: ../../basic-data-types.rst:33
#: ../../basic-data-types.rst:35
msgid "✅"
msgstr ""

#: ../../basic-data-types.rst:29
#: ../../basic-data-types.rst:31
#: ../../basic-data-types.rst:33
#: ../../basic-data-types.rst:35
msgid "❌"
msgstr ""

#: ../../basic-data-types.rst:31
msgid "❗ [#f2]_"
msgstr ""

#: ../../basic-data-types.rst:35
msgid "❗ [#f3]_"
msgstr ""

#: ../../basic-data-types.rst:38
msgid "Footnotes"
msgstr ""

#: ../../basic-data-types.rst:39
msgid "When assigning a pointer to an integer variable, ZiYue4D will automatically raise the variable to pointer type."
msgstr ""

#: ../../basic-data-types.rst:40
msgid "Float to Integer will round to the nearest integer. This may lead to loss of accuracy."
msgstr ""

#: ../../basic-data-types.rst:41
msgid "Storing a pointer in an integer is deprecated BlitzBasic practice. ZiYue4D will raise the variable to pointer type automatically."
msgstr ""

#: ../../comments.rst:2
msgid "Comments"
msgstr ""

#: ../../comments.rst:4
msgid "You add comments to your programs using the ``;`` character. Everything following ``;`` until the end of the line will be ignored."
msgstr ""

#: ../../comments.rst:6
msgid "``/* */`` is also supported for block comments. Everything between ``/*`` and ``*/`` will be ignored, even if it spans multiple lines. Block comments do not nest."
msgstr ""

#: ../../functions.rst:2
msgid "Functions"
msgstr ""

#: ../../functions.rst:6
msgid "Functions cannot be declared inside a function."
msgstr ""

#: ../../functions.rst:8
msgid "A function is defined using the ``Function`` keyword:"
msgstr ""

#: ../../functions.rst:16
msgid "``name%(arg1$, arg2# = 3.14)`` is the **function signature**, which it contains:"
msgstr ""

#: ../../functions.rst:18
msgid "``name`` is the function name, can be any valid identifier."
msgstr ""

#: ../../functions.rst:20
msgid "``%`` is the type of value returned by the function. If it is omitted,the function returns an integer value by default."
msgstr ""

#: ../../functions.rst:22
msgid "``arg1$, arg2# = 3.14`` is a comma-separated list of arguments. ``arg1$`` is a **mandatory argument** with no default value. ``arg2#`` is an **optional argument** since it has a default value. Arguments are always local."
msgstr ""

#: ../../functions.rst:24
msgid "The statements between signature and ``End Function`` are the **function definition**. All ZiYue4D functions should have signature and definition."
msgstr ""

#: ../../functions.rst:26
msgid "A function may use the ``Return`` statement to return a result. ``Return`` may optionally be followed by an expression."
msgstr ""

#: ../../functions.rst:28
msgid "If there is no ``Return`` statement, or a ``Return`` without any expression is used, the function returns a default value of ``0`` for numeric functions, an empty string ``\"\"`` for string functions, or a Null object for custom-type functions."
msgstr ""

#: ../../functions.rst:33
msgid "Exteral function"
msgstr ""

#: ../../functions.rst:35
msgid "**External functions** are implemented in other programming languages, which are to be called by ZiYue4D program."
msgstr ""

#: ../../functions.rst:37
msgid "Using ``Extern`` keyword before its signature to declare an external function. External functions should not have a function definition. This concept is designed for replacing ``.decls`` in Blitz3D."
msgstr ""

#: ../../functions.rst:39
msgid "The example below shows a declaration of an external function."
msgstr ""

#: ../../functions.rst:47
msgid "Function overloading"
msgstr ""

#: ../../functions.rst:51
msgid ":ref:`extern-function` does not support overloading."
msgstr ""

#: ../../functions.rst:53
msgid "When multiple functions need to share the same name, ZiYue4D will check its arguments to determine whether it is overridable. Basically, the regulation of overloading is:"
msgstr ""

#: ../../functions.rst:55
msgid "The functions share the same name."
msgstr ""

#: ../../functions.rst:56
msgid "Their number of mandatory arguments and optional arguments is unique."
msgstr ""

#: ../../functions.rst:57
msgid "The return value type and argument types are irrelevant to overloading."
msgstr ""

#: ../../functions.rst:59
msgid "The example below shows the overloading. The first and the second are valid since they have different counts of mandatory and optional arguments. The third one is invalid, in contrast, even though its argument types are unique."
msgstr ""

#: ../../index.rst:2
msgid "Welcome to ZiYue4D documentation!"
msgstr ""

#: ../../index.rst:4
msgid "**ZiYue4D** is a programming language that is powered by LLVM and is based on BlitzBasic."
msgstr ""

#: ../../index.rst:8
msgid "This project is under active development."
msgstr ""

#: ../../index.rst:11
msgid "Contents"
msgstr ""

#: ../../unsafe-operations.rst:2
msgid "Unsafe operations"
msgstr ""

#: ../../unsafe-operations.rst:4
msgid "**Unsafe operations** such as retrieving pointers or converting a pointer to integer, are not recommended for use. In most cases, unsafe operations are not required. Using them improperly will cause undefined behavior, and even crash the program."
msgstr ""

#: ../../unsafe-operations.rst:7
msgid "Function pointer"
msgstr ""

#: ../../unsafe-operations.rst:11
msgid "Retrieving pointer of function which used :ref:`function-overloading` is undefined behavior."
msgstr ""

#: ../../unsafe-operations.rst:13
msgid "Using ``&`` unary operator on a function identifier to retrieve its pointer."
msgstr ""

#: ../../unsafe-operations.rst:15
msgid "The example below shows retrieve a function pointer."
msgstr ""
